import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_iris
# Load the Iris dataset from sklearn
iris = load_iris()
#By using this array in the columns parameter, you're associating each column with
the appropriate feature name, making the DataFrame more understandable.
df = pd.DataFrame(data=iris.data, columns=iris.feature_names)
print(df)
# Add target variable (species) as a categorical column
df['species'] = pd.Categorical.from_codes(iris.target, iris.target_names)
print(df['species'])
# 1. Select a numerical column (let's choose 'sepal length (cm)')
numerical_column = 'sepal length (cm)'
# 2. Compute mean, median, mode, standard deviation, variance, and range
mean_value = df[numerical_column].mean()
median_value = df[numerical_column].median()
mode_value = df[numerical_column].mode()[0]
std_dev = df[numerical_column].std()
variance = df[numerical_column].var()
data_range = df[numerical_column].max() - df[numerical_column].min()
print(f"Mean: {mean_value}")
print(f"Median: {median_value}")
print(f"Mode: {mode_value}")
print(f"Standard Deviation: {std_dev}")
print(f"Variance: {variance}")
print(f"Range: {data_range}")

plt.figure(figsize=(10, 6))
sns.histplot(df[numerical_column], kde=True, bins=30)
plt.title(f"Histogram of {numerical_column}")
plt.xlabel(numerical_column)
plt.ylabel('Frequency')
plt.show()

# 4. Generate Boxplot
plt.figure(figsize=(8, 6))
sns.boxplot(x=df[numerical_column])
plt.title(f"Boxplot of {numerical_column}")
plt.xlabel(numerical_column)
plt.show()
# 5. Identify outliers using IQR (Interquartile Range)
Q1 = df[numerical_column].quantile(0.25)
Q3 = df[numerical_column].quantile(0.75)
IQR = Q3 - Q1
outlier_lower = Q1 - 1.5 * IQR
outlier_upper = Q3 + 1.5 * IQR
# Detecting outliers
outliers = df[(df[numerical_column] < outlier_lower) | (df[numerical_column] >
outlier_upper)]
print("Outliers detected:")
print(outliers)
Outliers detected:
Empty DataFrame
Columns: [sepal length (cm), sepal width (cm), petal length (cm), petal width (cm), species]
Index: []
# 6. Select a categorical variable (example: 'species')
categorical_column = 'species'
# 7. Compute the frequency of each category
category_counts = df[categorical_column].value_counts()
print("\nCategory Frequencies:")
print(category_counts)
Category Frequencies:
species
setosa 50
versicolor 50
virginica 50
Name: count, dtype: int64
# 8. Display Bar Chart for the categorical variable
plt.figure(figsize=(8, 6))
category_counts.plot(kind='bar', color='skyblue')
plt.title(f"Category Frequencies of {categorical_column}")
plt.xlabel(categorical_column)
plt.ylabel('Frequency')
plt.xticks(rotation=0)
plt.show()
# 9. Display Pie Chart for the categorical variable
plt.figure(figsize=(8, 6))
category_counts.plot(kind='pie', autopct='%1.1f%%', startangle=90)
plt.title(f"Category Distribution of {categorical_column}")
plt.ylabel('') # Hide the ylabel
plt.show()
